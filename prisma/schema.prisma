// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(254)
  password  String   @db.VarChar(254)
  createdAt DateTime @default(now()) @db.Timestamptz()

  sessions    Session[]
  credentials Credential[]
  notes       Note[]
  cards       Card[]
  networks    Network[]
  documents   Document[]

  @@map("users")
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model Credential {
  id        Int      @id @default(autoincrement())
  userId    Int
  label     String   @db.VarChar(254)
  url       String
  login     String
  password  String
  createdAt DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, label])
  @@map("credentials")
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    Int
  title     String   @db.VarChar(50)
  body      String   @db.VarChar(1000)
  createdAt DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, title])
  @@map("notes")
}

model Card {
  id             Int      @id @default(autoincrement())
  userId         Int
  label          String   @db.VarChar(254)
  number         String   @db.VarChar(254)
  cardholder     String   @db.VarChar(254)
  securityCode   String   @db.VarChar(254)
  password       String   @db.VarChar(254)
  expirationDate String   @db.VarChar(10)
  isVirtual      Boolean  @default(false)
  type           CardType
  createdAt      DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, label])
  @@map("cards")
}

model Network {
  id        Int      @id @default(autoincrement())
  userId    Int
  label     String   @db.VarChar(254)
  ssid      String   @db.VarChar(32)
  password  String   @db.VarChar(254)
  createdAt DateTime @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, label])
  @@map("networks")
}

model Document {
  id             Int          @id @default(autoincrement())
  userId         Int
  type           DocumentType
  fullName       String       @db.VarChar(254)
  number         String       @db.VarChar(254)
  expirationDate String       @db.VarChar(10)
  issuedBy       String       @db.VarChar(254)
  createdAt      DateTime     @default(now()) @db.Timestamptz()

  user User @relation(fields: [userId], references: [id])
  @@map("documents")
}

enum DocumentType {
  driverLicense
  idCard
}

enum CardType {
  credit
  debit
  creditAndDebit
}
